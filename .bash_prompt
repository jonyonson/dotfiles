#!/usr/bin/env bash

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;
			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;
			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;
			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;
			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;
		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

# Escape codes for coloring bash prompt
red="\[\033[0;31m\]"
yellow="\[\033[1;33m\]"
green="\[\033[0;32m\]"
blue="\[\033[1;34m\]"
magenta="\[\033[1;35m\]"
cyan="\[\033[1;36m\]"
light_red="\[\033[1;31m\]"
light_green="\[\033[1;32m\]"
white="\[\033[1;37m\]"
light_gray="\[\033[0;37m\]"
reset="\[\e[0m\]"

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${cyan}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${red}";
else
	hostStyle="${yellow}";
fi;

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]";     # working directory base name
PS1+="\n";                   # newline
PS1+="\[${userStyle}\]\u";   # username
PS1+="\[${reset}\] at ";     # 'at'
PS1+="\[${hostStyle}\]\h";   # host
PS1+="\[${reset}\] in ";     # 'in'
PS1+="\[${magenta}\]\w";     # working directory full path
PS1+="\$(prompt_git \"\[${reset}\] on \[${light_green}\]\" \"\[${blue}\]\")"; # Git repository details
PS1+="\n";                   # newline
PS1+="\[${reset}\]\$ "       # '$'
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
